@page "/graph"
@rendermode InteractiveServer
@inject ILogger<Graph> Logger
@using Syncfusion.Blazor.Charts

<PageTitle>Graph</PageTitle>

<h3>Graph</h3>
<button class="btn btn-primary" @onclick="Clear">clear</button>
<button class="btn btn-primary" @onclick="AddModel">add model</button>
<br>
<SfChart>
    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" Format="dd MMM" />
    <ChartSeriesCollection>
        @foreach (Simulator model in Models)
        {
            <ChartSeries DataSource="@model.Simulate()" PointColorMapping="blue" XName="Date" YName="Wealth"
                Type="ChartSeriesType.Line" />
        }
    </ChartSeriesCollection>
</SfChart>

<label>Model count: @Models.Count</label> <br>

@for (int i = 0; i < Models.Count; i++)
{
    <button type="button">Model @(i + 1)</button>
    <br>
    <!-- TODO: make expandable overview of the model, delete just one model -->
}

<input type="checkbox" @bind="Checked" @onclick="TogglePersonCheckBox">
<label> A Real Person:</label><br>
@if (Simulant.Victim != null) {
    @Simulant.Victim.Render()
}


@code {
    /// List of used models
    List<Simulator> Models = [];
    /// the work in progress simulator
    Simulator Simulant = new();

    private bool Checked = false;
    private void TogglePersonCheckBox() {
        if (Checked) {
            Simulant.Victim = null;
        } else {
            Simulant.Victim = new(null);
            Simulant.Victim.TriggerRender = StateHasChanged;
        }
    }
    private void Clear()
    {
        Models = [];
    }
    private void AddModel()
    {
        Checked=false;
        Models.Add(Simulant);
        Simulant = new();
    }

    /// Wraps the given content RenderFragment inside an HTML element specified by tagName.
    /// content: The RenderFragment to be wrapped.
    /// tagName: The HTML tag name to wrap around the content (e.g., "div", "section").
    /// Optional dictionary of HTML attributes to add to the wrapping element.
    /// Keys are attribute names (e.g., "class", "id"), values are attribute values.
    /// No validation is performed on the tagName or attribute keys/values.
    /// Use valid HTML tags and attribute names to avoid runtime errors.
    public static RenderFragment WrapWithElement(
        RenderFragment content,
        string tagName,
        Dictionary<string, object>? attributes = null)
    {
        return builder =>
        {
            int seq = 0;
            builder.OpenElement(seq++, tagName);

            // Add attributes if provided
            if (attributes != null)
            {
                foreach (var attr in attributes)
                {
                    builder.AddAttribute(seq++, attr.Key, attr.Value);
                }
            }

            // Insert the actual content
            content(builder);

            builder.CloseElement(); // </tagName>
        };
    }

    private class ChartData
    {
        public ChartData(DateTime date, double wealth)
        {
            Date = date;
            Wealth = wealth;
        }
        public DateTime Date { get; set; }
        public double Wealth { get; set; }
    }

    /// Represents something that generates income
    ///
    /// Assets can own other assets but their balances are seperate
    private class Asset
    {
        /// represents the ammount of money invested in this asset
        public double Balance;
        /// assets managed by this asset
        public List<Asset> Assets = new();
        public Action? TriggerRender { get; set; }
        private Asset? Parent;
        public Asset(Asset? parent) {
            Parent = parent;
        }

        /// calculates the recursive ballance of all owned assets + self
        public double TotalBalance
        {
            get
            {
                double _runningTotal = Balance;
                foreach (Asset asset in Assets)
                {
                    _runningTotal += asset.TotalBalance;
                }
                return _runningTotal;
            }
        }

        /// Advances the balance of the assets and own profit by a month
        public void AdvanceByMonth()
        {
            AddOwnMonthlyProfit(Parent);
            foreach (Asset asset in Assets)
            {
                asset.AdvanceByMonth();
            }
        }

        /// Pure profit excluding assets
        /// if any investment must be made, it is take from `Victim`
        public virtual void AddOwnMonthlyProfit(Asset? Victim = null)
        {
            // by default balance stays the same
            // add inflation??
        }

        /// Moves `ammount` of money into `destination`
        /// usefull for monthly expenditures like moving money into a savings account
        /// Exceptions:
        /// raises an OutOfBound exception if balance is too low
        public void Move(double ammount, Asset destination)
        {
            if (Balance < ammount)
            {
                // TODO: do this failure more gracefully
                throw new System.ArgumentOutOfRangeException(
                    $"Balance : {Balance} is less than requested move ammount {ammount}"
                );
            }
            Balance -= ammount;
            destination.Balance += ammount;
        }

        private int bab = 0;
        /// returns the rendering of itself in html
        public RenderFragment Render() {
            RenderFragment _runningTotal = RenderSelf();

            foreach (Asset child in Assets) {
                int seq = 0;
                _runningTotal += (__builder) => {
                    __builder.OpenElement(seq++, "li");
                    __builder.SetKey(child);
                    @child.Render();
                    __builder.CloseElement();
                };
            }

            _runningTotal += (__builder) => {
                <label>@Assets.Count</label>
                <br>
                <label>@bab</label>
                <br>
                <button @onclick="() => {Assets.Add((SavingsAccount) new(this)); TriggerRender?.Invoke();}">Sporak</button>
                <button @onclick="() => bab += 1">shit</button>
            };

            // we wrap the elements in a div and offset it to create a hierarchy
            return WrapWithElement(
                _runningTotal, 
                "div", 
                new Dictionary<string, object> {{ "style" , "margin-left:70px;"}}
            );
        }

        /// renders only its own stuff, no children
        public virtual RenderFragment RenderSelf() {
            return @<h4>Asset</h4>;
        }

    }

    private class SavingsAccount : Asset
    {
        /// The Yearly Interest Rate In %
        private double InterestRate = 5;
        private double MontlhyInvestment = 0;

        public SavingsAccount(Asset? parent) : base(parent) {}

        private double GetMonthlyInterestRate()
        {
            return Math.Pow(1 + InterestRate, 1.0 / 12.0) - 1;
        }

        public override void AddOwnMonthlyProfit(Asset? Victim)
        {
            if (Victim == null) {
                throw new System.ArgumentOutOfRangeException("Victim should not be null for the SavingsAccount");
            }
            Victim.Move(MontlhyInvestment, this);
            Balance *= (1 + GetMonthlyInterestRate());
        }
        public override RenderFragment RenderSelf() {
            RenderFragment _runningTotal = (__builder) => {
                <h4>A Working Person</h4>
                <label>Interest Rate: </label> <input @bind="InterestRate" /> <br>
                <label>Monthly Investment: </label> <input @bind="MontlhyInvestment " /> <br>
            };
            return _runningTotal;
        }
    }

    private class AWorkingPerson : Asset
    {
        public AWorkingPerson (Asset parent) : base(parent) {}
        public double StartingCapital = 0;
        public double MontlhyIncome = 10_000;
        public double WealthCap = 10_000_000;

        public override void AddOwnMonthlyProfit(Asset? Victim)
        {
            Balance += MontlhyIncome;
        }
        public override RenderFragment RenderSelf() {
            RenderFragment _runningTotal = (__builder) => {
                <h4>A Working Person</h4>
                <label>Montlhy Income:</label> <input @bind="MontlhyIncome" /> <br>
                <label>Starting Capital:</label> <input @bind="StartingCapital" /> <br>
                <label>Wealth Cap:</label> <input @bind="WealthCap" /> <br>
            };
            return _runningTotal;
        }

    }
    private class Simulator
    {
        public AWorkingPerson? Victim;
        public double WealthGoal = 1_000_000;
        public List<ChartData> Simulate()
        {
            List<ChartData> data = new();
            DateTime today = DateTime.Today;

            if (Victim == null) {
                return data;
            }
            Victim.Balance = Victim.StartingCapital;

            for (int i = 0; i < 12 * 30; i++)
            {
                Victim.AdvanceByMonth();
                data.Add(
                    new ChartData(today.AddMonths(i), Victim.TotalBalance)
                );
                if (Victim.TotalBalance > WealthGoal) {
                    break ;
                }
            }

            return data;
        }
    }
}
